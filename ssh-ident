#!/usr/bin/env python3
"""Start and use ssh-agent and load identities as necessary."""

from __future__ import print_function

import collections
import datetime
import distutils.spawn
import errno
import fcntl
import getpass
import logging
import os
import re
import shlex
import shutil
import socket
import subprocess
import sys
import tempfile
import termios
import textwrap
from dataclasses import dataclass
from typing import IO, Any, Dict, Iterable, List, NoReturn, Optional, Tuple, Union

logging.basicConfig(format="%(message)s", level=logging.DEBUG)
logger = logging.getLogger("ssh-ident")
logger.setLevel(logging.INFO)


KeysDict = Dict[str, Dict[str, str]]


class Config:
    """Holds and loads users configurations."""

    defaults = {
        # Where to find the per-user configuration.
        "FILE_USER_CONFIG": "$HOME/.ssh/identrc",
        # Where to find all the identities for the user.
        "DIR_IDENTITIES": "$HOME/.ssh/identities",
        # Where to keep the information about each running agent.
        "DIR_AGENTS": "$HOME/.ssh/agents",
        # How to identify key files in the identities directory.
        "PATTERN_KEYS": r"/(id_.*|identity.*|ssh[0-9]-.*)",
        # How to identify ssh config files.
        "PATTERN_CONFIG": r"/config$",
        # Dictionary with identity as a key, automatically adds
        # the specified options to the ssh command run.
        "SSH_OPTIONS": {},
        # Additional options to append to ssh by default.
        "SSH_DEFAULT_OPTIONS": "-oUseRoaming=no",
        # Complete path of full ssh binary to use. If not set, ssh-ident will
        # try to find the correct binary in PATH.
        "BINARY_SSH": None,
        "BINARY_DIR": None,
        # Which identity to use by default if we cannot tell from
        # the current working directory and/or argv.
        "DEFAULT_IDENTITY": "$USER",
        # Those should really be overridden by the user. Look
        # at the documentation for more details.
        "MATCH_PATH": [],
        "MATCH_ARGV": [],
        # Dictionary with identity as a key, allows to specify
        # per identity options when using ssh-add.
        "SSH_ADD_OPTIONS": {},
        # ssh-add default options. By default, don't keep a key longer
        # than 2 hours.
        "SSH_ADD_DEFAULT_OPTIONS": "-t 7200",
        # Like BatchMode in ssh, see man 5 ssh_config.
        # In BatchMode ssh-ident will not print any output and not ask for
        # any passphrases.
        "SSH_BATCH_MODE": False,
        # Output verbosity
        # valid values are: ERROR, WARNING, INFO, DEBUG (from logging)
        # use CRITICAL to disable ALL output (not recommended!)
        "VERBOSITY": logging.INFO,
        # Per-identity user for sshproxy.
        "SSHPROXY_USER": {},
        # Additional arguments to `SshProxy.__init__()`, keyed by identity
        "SSHPROXY_ARGS": {},
    }

    def __init__(self) -> None:
        self.values: Dict[str, Any] = {}

    def Load(self) -> "Config":
        """Load configurations from the default user file."""
        path = self.Get("FILE_USER_CONFIG")
        variables: Dict[str, Any] = {}
        try:
            exec(compile(open(path).read(), path, "exec"), None, variables)
        except IOError:
            return self
        self.values = variables
        return self

    @staticmethod
    def Expand(value: Any) -> Any:
        """Expand environment variables or ~ in string parameters."""
        if isinstance(value, str):
            return os.path.expanduser(os.path.expandvars(value))
        return value

    def Get(self, parameter: str) -> Any:
        """Returns the value of a parameter, or causes the script to exit."""
        if parameter in os.environ:
            return self.Expand(os.environ[parameter])
        if parameter in self.values:
            return self.Expand(self.values[parameter])
        if parameter in self.defaults:
            return self.Expand(self.defaults[parameter])

        logger.error(
            "Parameter '%s' needs to be defined in config file or defaults",
            parameter,
            # file=sys.stderr,
        )
        sys.exit(2)

    def Set(self, parameter: str, value: Any) -> None:
        """Sets configuration option parameter to value."""
        self.values[parameter] = value


def FindIdentityInList(
    elements: Iterable[str], identities: Iterable[Tuple[str, Union[str, Iterable[str]]]]
) -> Union[None, str, Iterable[str]]:
    """Matches a list of identities to a list of elements.

    Args:
      elements: iterable of strings, arbitrary strings to match on.
      identities: iterable of (string, string), with first string
        being a regular expression, the second string being an identity.

    Returns:
      The identity specified in identities for the first regular expression
      matching the first element in elements.
    """
    for element in elements:
        for regex, identity in identities:
            if re.search(regex, element):
                return identity
    return None


def FindIdentities(argv: Iterable[str], config: Config) -> List[str]:
    """Returns the identity to use based on current directory or argv.

    Args:
      argv: iterable of string, argv passed to this program.
      config: instance of an object implementing the same interface as
          the Config class.

    Returns:
      string, the name of the identity to use.
    """
    paths = set(
        [os.getcwd(), os.path.abspath(os.getcwd()), os.path.normpath(os.getcwd())]
    )
    idents = (
        FindIdentityInList(argv, config.Get("MATCH_ARGV"))
        or FindIdentityInList(paths, config.Get("MATCH_PATH"))
        or config.Get("DEFAULT_IDENTITY")
    )
    if isinstance(idents, str):
        return [idents]
    return list(idents)


def FindKeys(identity: str, config: Config) -> KeysDict:
    """Finds all the private and public keys associated with an identity.

    Args:
      identity: string, name of the identity to load strings of.
      config: object implementing the Config interface, providing configurations
          for the user.

    Returns:
      dict, {"key name": {"pub": "/path/to/public/key", "priv":
      "/path/to/private/key"}}, for each key found, the path of the public
      key and private key. The key name is just a string representing the
      key. Note that for a given key, it is not guaranteed that both the
      public and private key will be found.
      The return value is affected by DIR_IDENTITIES and PATTERN_KEYS
      configuration parameters.
    """
    directories = [os.path.join(config.Get("DIR_IDENTITIES"), identity)]
    if identity == getpass.getuser():
        directories.append(os.path.expanduser("~/.ssh"))

    pattern = re.compile(config.Get("PATTERN_KEYS"))
    found: Dict[str, Dict[str, str]] = collections.defaultdict(dict)
    for directory in directories:
        try:
            keyfiles = os.listdir(directory)
        except OSError as e:
            if e.errno == errno.ENOENT:
                continue
            raise

        for key in keyfiles:
            key = os.path.join(directory, key)
            if not os.path.isfile(key):
                continue
            if not pattern.search(key):
                continue

            kinds = (
                ("private", "priv"),
                ("public", "pub"),
                (".pub", "pub"),
                ("", "priv"),
            )
            for match, kind in kinds:
                if match in key:
                    found[key.replace(match, "")][kind] = key

    if "sshproxy" in identity and not found:
        name = "sshproxy_rsa"
        key = os.path.join(directories[0], name)
        found[key]["priv"] = key
        found[key]["pub"] = key + ".pub"
    if not found:
        logger.warning(
            "Warning: no keys found for identity %s in:",
            identity,
            # file=sys.stderr,
        )
        logger.warning(directories)  # , file=sys.stderr)

    return found


def FindSSHConfig(identity: str, config: Config) -> Optional[str]:
    """Finds a config file if there's one associated with an identity

    Args:
      identity: string, name of the identity to load strings of.
      config: object implementing the Config interface, providing configurations
          for the user.

    Returns:
      string, the configuration file to use
    """
    directories = [os.path.join(config.Get("DIR_IDENTITIES"), identity)]

    pattern = re.compile(config.Get("PATTERN_CONFIG"))
    # sshconfigs = collections.defaultdict(dict)
    for directory in directories:
        try:
            sshconfigs = os.listdir(directory)
        except OSError as e:
            if e.errno == errno.ENOENT:
                continue
            raise

        for sshconfig in sshconfigs:
            sshconfig = os.path.join(directory, sshconfig)
            if os.path.isfile(sshconfig) and pattern.search(sshconfig):
                return sshconfig

    return None


def GetSessionTty(mode: str = "r") -> Optional[IO[Any]]:
    """Returns a file descriptor for the session TTY, or None.

    In *nix systems, each process is tied to one session. Each
    session can be tied (or not) to a terminal, "/dev/tty".

    Additionally, when a command is run, its stdin or stdout can
    be any file descriptor, including one that represent a tty.

    So for example:

      ./test.sh < /dev/null > /dev/null

    will have stdin and stdout tied to /dev/null - but does not
    tell us anything about the session having a /dev/tty associated
    or not.

    For example, running

      ssh -t user@remotehost './test.sh < /dev/null > /dev/null'

    have a tty associated, while the same command without -t will not.

    When ssh is invoked by tools like git or rsyn, its stdin and stdout
    is often tied to a file descriptor which is not a terminal, has
    the tool wants to provide the input and process the output.

    ssh-ident internally has to invoke ssh-add, which needs to know if
    it has any terminal it can use at all.

    This function returns an open file if the session has an usable terminal,
    None otherwise.
    """
    try:
        fd = open("/dev/tty", mode)
        fcntl.ioctl(fd, termios.TIOCGPGRP, b"  ")
    except IOError:
        return None
    return fd


class SshProxyError(Exception):
    pass


@dataclass
class SshProxy:
    user: str
    key_path: str
    scope: Optional[str] = None  # opt_scope
    account: Optional[str] = None  # opt_collab
    proxy: Optional[str] = None  # opt_socks
    url: str = "https://sshproxy.nersc.gov"

    def GetKey(self) -> str:
        """Returns the path to the certificate file."""
        # This lets the rest of the script run without errors if requests isn't available
        # pylint: disable=import-outside-toplevel
        import requests

        scope = "default"
        data = ""
        if self.account is not None:
            if self.scope is None:
                scope = "collab"
                self.scope = self.account
            data = '{"target_user": "' + self.account + '"}'

        idfile = self.key_path
        certfile = self.key_path + "-cert.pub"
        pubfile = self.key_path + ".pub"

        if (
            os.path.exists(idfile)
            and os.path.exists(certfile)
            and os.path.exists(pubfile)
        ):
            # check the current key expiration
            try:
                timeout = self.GetTimeout(certfile)
                if timeout > 0:
                    # existing key is valid
                    return certfile
            except SshProxyError:
                pass

        pw = getpass.getpass(f"Enter the password+OTP for {self.user}: ")
        print()

        r = requests.post(
            self.url + "/create_pair/" + scope + "/", data=data, auth=(self.user, pw),
        )
        r.raise_for_status()
        first_line = r.text.split("\n")[0].rstrip("\r")
        if "Authentication failed. Failed login" in first_line:
            logger.error("The sshproxy server said: %s", first_line)
            logger.error(
                "This usually means you did not enter the correct password or OTP"
            )
            raise SshProxyError(first_line)
        if first_line != "-----BEGIN RSA PRIVATE KEY-----":
            logger.error("Did not get in a proper ssh private key. Output was:")
            logger.error("%s", r.text)
            logger.error("Hopefully that's informative")
            raise SshProxyError("Did not get in a proper ssh private key")

        tmpdir = os.path.dirname(idfile)
        tmpkey = tempfile.NamedTemporaryFile(prefix="key.", dir=tmpdir)
        tmpcert = tempfile.NamedTemporaryFile(prefix="cert.", dir=tmpdir)
        tmppub = tempfile.NamedTemporaryFile(prefix="pub.", dir=tmpdir)

        tmpkey.write(r.content)
        tmpkey.flush()
        # extract the cert from the private key file
        for line in r.content.splitlines(keepends=True):
            if b"ssh-rsa" in line:
                tmpcert.write(line)
        tmpcert.flush()
        # make sure the private key has proper permissions so ssh-keygen doesn't complain
        os.chmod(tmpkey.name, 0o600)
        # get the public key from the private key
        subprocess.run(
            ["ssh-keygen", "-y", "-f", tmpkey.name], stdout=tmppub, check=True
        )

        shutil.copy(tmpkey.name, idfile)
        shutil.copy(tmpcert.name, certfile)
        shutil.copy(tmppub.name, pubfile)

        return certfile

    @staticmethod
    def GetTimeout(certfile: str) -> int:
        """Returns the number of seconds until the certificate expires."""
        # get the expiry time from the certificate
        valid_seconds: Optional[int] = None
        proc = subprocess.Popen(
            ["ssh-keygen", "-L", "-f", certfile],
            stdout=subprocess.PIPE,
            universal_newlines=True,
        )
        assert proc.stdout is not None
        for line in proc.stdout.readlines():
            if "Valid:" in line:
                expire_str = line.partition(" to ")[2].strip()
                expire_time = datetime.datetime.strptime(
                    expire_str, "%Y-%m-%dT%H:%M:%S"
                )
                diff = expire_time - datetime.datetime.now()
                valid_seconds = int(diff.total_seconds())
        if valid_seconds is None:
            raise SshProxyError("Could not get expiry time from certificate")
        if valid_seconds < 0:
            raise SshProxyError(
                "cert {} is expired or otherwise invalid. Expiration read as: {}".format(
                    certfile, expire_time
                )
            )
        return valid_seconds


class AgentManager:
    """Manages the ssh-agent for one identity."""

    def __init__(
        self, identity: str, config: Config, main_identity: Optional[str] = None
    ):
        """Initializes an AgentManager object.

        Args:
          identity: string, identity the ssh-agent managed by this instance of
              an AgentManager will control.
          config: object implementing the Config interface, allows access to
              the user configuration parameters.

        Attributes:
          identity: same as above.
          config: same as above.
          agent_file: the config of the agent corresponding to this identity.

        Parameters:
          DIR_AGENTS: used to compute agents_path.
          BINARY_SSH: path to the ssh binary.
        """
        self.identity = identity
        self.config = config
        self.ssh_config = FindSSHConfig(self.identity, self.config)
        agents_path = os.path.abspath(config.Get("DIR_AGENTS"))
        if main_identity is None:
            main_identity = self.identity
        self.agent_file = self.GetAgentFile(agents_path, main_identity)

    def LoadUnloadedKeys(self, keys: KeysDict) -> None:
        """Loads all the keys specified that are not loaded.

        Args:
          keys: dict as returned by FindKeys.
        """
        toload = self.FindUnloadedKeys(keys)
        if toload:
            logger.info(
                "Loading keys:\n    %s",
                "\n    ".join(toload),
                # file=sys.stderr,
            )
            self.LoadKeyFiles(toload)
        else:
            logger.info("All keys already loaded")  # , file=sys.stderr)

    def FindUnloadedKeys(self, keys: KeysDict) -> Iterable[str]:
        """Determines which keys have not been loaded yet.

        Args:
          keys: dict as returned by FindKeys.

        Returns:
          iterable of strings, paths to private key files to load.
        """
        loaded = set(self.GetLoadedKeys())
        toload = set()
        for _key, config in keys.items():
            if "pub" not in config:
                continue
            if "priv" not in config:
                continue

            fingerprint = self.GetPublicKeyFingerprint(config["pub"])
            if fingerprint in loaded:
                continue

            toload.add(config["priv"])
        return toload

    def LoadKeyFiles(self, keys: Iterable[str]) -> None:
        """Load all specified keys.

        Args:
          keys: iterable of strings, each string a path to a key to load.
        """
        console_in = GetSessionTty("r")
        console_out = GetSessionTty("w")
        keys = list(keys)

        for key in keys.copy():
            if "sshproxy" in os.path.basename(key):
                user = self.config.Get("SSHPROXY_USER").get(
                    self.identity, getpass.getuser()
                )
                kwargs = self.config.Get("SSHPROXY_ARGS").get(self.identity, {})
                sshproxy = SshProxy(user, key, **kwargs)
                certfile = sshproxy.GetKey()
                valid_seconds = SshProxy.GetTimeout(certfile)
                self.RunShellCommandInAgent(
                    self.agent_file,
                    "ssh-add -t {0} {1}".format(valid_seconds, key),
                    stdout=console_out,
                    stdin=console_in,
                )
                keys.remove(key)
        if not keys:
            return
        keys = " ".join(keys)
        options = self.config.Get("SSH_ADD_OPTIONS").get(
            self.identity, self.config.Get("SSH_ADD_DEFAULT_OPTIONS")
        )
        self.RunShellCommandInAgent(
            self.agent_file,
            "ssh-add {0} {1}".format(options, keys),
            stdout=console_out,
            stdin=console_in,
        )

    def GetLoadedKeys(self) -> Iterable[str]:
        """Returns an iterable of strings, each the fingerprint of a loaded key."""
        retval, stdout = self.RunShellCommandInAgent(self.agent_file, "ssh-add -l")
        if retval != 0:
            return []

        fingerprints = []
        for line in stdout.decode("utf-8").split("\n"):
            try:
                _, fingerprint, _ = line.split(" ", 2)
                fingerprints.append(fingerprint)
            except ValueError:
                continue
        return fingerprints

    @classmethod
    def GetPublicKeyFingerprint(cls, key: str) -> Optional[str]:
        """Returns the fingerprint of a public key as a string."""
        retval, stdout = cls.RunShellCommand(
            "ssh-keygen -l -f {0} |tr -s ' '".format(key)
        )
        if retval:
            return None

        try:
            _, fingerprint, _ = stdout.decode("utf-8").split(" ", 2)
        except ValueError:
            return None
        return fingerprint

    @classmethod
    def GetAgentFile(cls, path: str, identity: str) -> str:
        """Returns the path to an agent config file.

        Args:
          path: string, the path where agent config files are kept.
          identity: string, identity for which to load the agent.

        Returns:
          string, path to the agent file.
        """
        # Create the paths, if they do not exist yet.
        try:
            os.makedirs(path, 0o700)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise OSError(
                    "Cannot create agents directory, try manually with "
                    "'mkdir -p {0}'".format(path)
                ) from e

        # Use the hostname as part of the path just in case this is on NFS.
        agentfile = os.path.join(
            path, "agent-{0}-{1}".format(identity, socket.gethostname())
        )
        if os.access(agentfile, os.R_OK) and cls.IsAgentFileValid(agentfile):
            logger.debug(
                "Agent for identity %s ready",
                identity,
                # file=sys.stderr,
            )
            return agentfile

        logger.debug(
            "Preparing new agent for identity %s",
            identity,
            # file=sys.stderr,
        )
        _retval = subprocess.call(
            ["/usr/bin/env", "-i", "/bin/sh", "-c", "ssh-agent > {0}".format(agentfile)]
        )
        return agentfile

    @classmethod
    def IsAgentFileValid(cls, agentfile: str) -> bool:
        """Returns true if the specified agentfile refers to a running agent."""
        retval, _output = cls.RunShellCommandInAgent(
            agentfile, "ssh-add -l >/dev/null 2>/dev/null"
        )
        if retval & 0xFF not in [0, 1]:
            logger.debug(
                "Agent in %s not running",
                agentfile,
                # file=sys.stderr,
            )
            return False
        return True

    @classmethod
    def RunShellCommand(
        cls,
        command: str,
        stdin: Union[None, int, IO[bytes]] = None,
        stdout: Union[None, int, IO[bytes]] = subprocess.PIPE,
    ) -> Tuple[int, bytes]:
        """Runs a shell command, returns (status, stdout), (int, string)."""
        cmd = ["/bin/sh", cls.GetShellArgs(), command]
        process = subprocess.Popen(cmd, stdin=stdin, stdout=stdout)
        out, _err = process.communicate()
        return process.wait(), out

    @classmethod
    def RunShellCommandInAgent(
        cls,
        agentfile: str,
        command: str,
        stdin: Union[None, int, IO[bytes]] = None,
        stdout: Union[None, int, IO[bytes]] = subprocess.PIPE,
    ) -> Tuple[int, bytes]:
        """Runs a shell command with an agent configured in the environment."""
        return cls.RunShellCommand(
            ". {0} >/dev/null 2>/dev/null; {1}".format(agentfile, command),
            stdin=stdin,
            stdout=stdout,
        )

    @staticmethod
    def EscapeShellArguments(argv: Iterable[str]) -> str:
        """Escapes all arguments to the shell, returns a string."""
        return " ".join(shlex.quote(arg) for arg in argv)

    @staticmethod
    def GetShellArgs() -> str:
        """Returns the flags to be passed to the shell to run a command."""
        shell_args = "-c"
        if logger.isEnabledFor(logging.DEBUG):
            shell_args = "-xc"
        return shell_args

    def RunSSH(self, argv: Iterable[str]) -> NoReturn:
        """Execs ssh with the specified arguments."""
        additional_flags = self.config.Get("SSH_OPTIONS").get(
            self.identity, self.config.Get("SSH_DEFAULT_OPTIONS")
        )
        if self.ssh_config:
            additional_flags += " -F {0}".format(self.ssh_config)

        command = [
            "/bin/sh",
            self.GetShellArgs(),
            ". {0} >/dev/null 2>/dev/null; exec {1} {2} {3}".format(
                self.agent_file,
                self.config.Get("BINARY_SSH"),
                additional_flags,
                self.EscapeShellArguments(argv),
            ),
        ]
        os.execv("/bin/sh", command)


def AutodetectBinary(argv: List[str], config: Config) -> None:
    """Detects the correct binary to run and sets BINARY_SSH accordingly,
    if it is not already set."""
    # If BINARY_SSH is set by the user, respect that and do nothing.
    if config.Get("BINARY_SSH"):
        logger.debug(
            "Will run '%s' as ssh binary - set by user via BINARY_SSH",
            config.Get("BINARY_SSH"),
        )
        return

    # If BINARY_DIR is set, look for the binary in this directory.
    runtime_name = argv[0]
    binary_path: Optional[str]
    if config.Get("BINARY_DIR"):
        binary_name = os.path.basename(runtime_name)
        binary_path = os.path.join(config.Get("BINARY_DIR"), binary_name)
        if not os.path.isfile(binary_path) or not os.access(binary_path, os.X_OK):
            binary_path = os.path.join(config.Get("BINARY_DIR"), "ssh")

        config.Set("BINARY_SSH", binary_path)
        logger.debug(
            "Will run '%s' as ssh binary - detected based on BINARY_DIR",
            config.Get("BINARY_SSH"),
        )
        return

    # argv[0] could be pretty much anything the caller decides to set
    # it to: an absolute path, a relative path (common in older systems),
    # or even something entirely unrelated.
    #
    # Similar is true for __file__, which might even represent a location
    # that is entirely unrelated to how ssh-ident was found.
    #
    # Consider also that there might be symlinks / hard links involved.
    #
    # The logic here is pretty straightforward:
    # - Try to eliminate the path of ssh-ident from PATH.
    # - Search for a binary with the same name of ssh-ident to run.
    #
    # If this fails, we may end up in some sort of loop, where ssh-ident
    # tries to run itself. This should normally be detected later on,
    # where the code checks for the next binary to run.
    #
    # Note also that users may not be relying on having ssh-ident in the
    # PATH at all - for example, with "rsync -e '/path/to/ssh-ident' ..."
    binary_name = os.path.basename(runtime_name)
    ssh_ident_path = ""
    if not os.path.dirname(runtime_name):
        message = textwrap.dedent(
            """\
            argv[0] ("%s") is a relative path. This means that ssh-ident does
            not know its own directory, and can't exclude it from searching it
            in $PATH:

              PATH="%s"

            This may result in a loop, with 'ssh-ident' trying to run itself.
            It is recommended that you set BINARY_SSH, BINARY_DIR, or run
            ssh-ident differently to prevent this problem."""
        )
        logger.info(message, runtime_name, os.environ["PATH"])
    else:
        ssh_ident_path = os.path.abspath(os.path.dirname(runtime_name))

    # Remove the path containing the ssh-ident symlink (or whatever) from
    # the search path, so we do not cause an infinite loop.
    # Note that:
    #  - paths in PATH may be not-normalized, example: "/usr/bin/../foo",
    #    or "/opt/scripts///". Normalize them before comparison.
    #  - paths in PATH may be repeated multiple times. We have to exclude
    #    all instances of the ssh-ident path.
    normalized_path = [
        os.path.normpath(p) for p in os.environ["PATH"].split(os.pathsep)
    ]
    search_path = os.pathsep.join([p for p in normalized_path if p != ssh_ident_path])

    # Find an executable with the desired name.
    binary_path = distutils.spawn.find_executable(binary_name, search_path)
    if not binary_path:
        # Nothing found. Try to find something named 'ssh'.
        binary_path = distutils.spawn.find_executable("ssh")

    if binary_path:
        config.Set("BINARY_SSH", binary_path)
        logger.debug(
            "Will run '%s' as ssh binary - detected from argv[0] and $PATH",
            config.Get("BINARY_SSH"),
        )
    else:
        message = textwrap.dedent(
            """\
            ssh-ident was invoked in place of the binary %s (determined from argv[0]).
            Neither this binary nor 'ssh' could be found in $PATH.

              PATH="%s"

            You need to adjust your setup for ssh-ident to work: consider setting
            BINARY_SSH or BINARY_DIR in your config, or running ssh-ident some
            other way."""
        )
        logger.error(message, argv[0], os.environ["PATH"])
        sys.exit(255)


def ParseCommandLine(argv: Iterable[str], config: Config) -> None:
    """Parses the command line parameters in argv
    and modifies config accordingly."""
    # This function may need a lot of refactoring if it is ever used for more
    # than checking for BatchMode for OpenSSH...
    binary = os.path.basename(config.Get("BINARY_SSH"))
    if binary in ("ssh", "scp"):
        # OpenSSH accepts -o Options as well as -oOption,
        # so let's convert argv to the latter form first
        i = iter(argv)
        argv = [p + next(i, "") if p == "-o" else p for p in i]
        # OpenSSH accepts 'Option=yes' and 'Option yes', 'true' instead of 'yes'
        # and treats everything case-insensitive
        # if an option is given multiple times,
        # OpenSSH considers the first occurrence only
        re_batchmode = re.compile(r"-oBatchMode[= ](yes|true)", re.IGNORECASE)
        re_nobatchmode = re.compile(r"-oBatchMode[= ](no|false)", re.IGNORECASE)
        for p in argv:
            if re.match(re_batchmode, p):
                config.Set("SSH_BATCH_MODE", True)
                break
            if re.match(re_nobatchmode, p):
                config.Set("SSH_BATCH_MODE", False)
                break


def main(argv: List[str]) -> NoReturn:
    # Replace stdout and stderr with /dev/tty, so we don't mess up with scripts
    # that use ssh in case we error out or similar.
    try:
        sys.stdout = open("/dev/tty", "w")
        sys.stderr = open("/dev/tty", "w")
    except IOError:
        pass

    config = Config().Load()
    if config.Get("SSH_BATCH_MODE"):
        # no output in BatchMode
        logger.setLevel(logging.CRITICAL)
    else:
        logger.setLevel(config.Get("VERBOSITY"))

    AutodetectBinary(argv, config)
    # Check that BINARY_SSH is not ssh-ident.
    # This can happen if the user sets a binary name only (e.g. 'scp') and a
    # symlink with the same name was set up.
    # Note that this relies on argv[0] being set sensibly by the caller,
    # which is not always the case. argv[0] may also just have the binary
    # name if found in a path.
    ssh_ident_path = distutils.spawn.find_executable(argv[0])
    assert ssh_ident_path is not None, "bad argv[0]"
    binary_path = distutils.spawn.find_executable(config.Get("BINARY_SSH"))
    assert binary_path is not None, "BINARY_SSH must be set!"
    binary_path = os.path.realpath(binary_path)
    ssh_ident_path = os.path.realpath(ssh_ident_path)
    if binary_path == ssh_ident_path:
        message = textwrap.dedent(
            """\
            ssh-ident found '%s' as the next command to run.
            Based on argv[0] (%s), it seems like this will create a
            loop.

            Please use BINARY_SSH, BINARY_DIR, or change the way
            ssh-ident is invoked (eg, a different argv[0]) to make
            it work correctly."""
        )
        logger.error(message, config.Get("BINARY_SSH"), argv[0])
        sys.exit(255)
    ParseCommandLine(argv, config)
    identities = FindIdentities(argv, config)
    primary = identities[0]
    primary_agent = AgentManager(primary, config)
    configs: Dict[
        Tuple[Optional[str], Optional[str]], List[str]
    ] = collections.defaultdict(list)
    for identity in identities:
        configs[
            (
                config.Get("SSH_ADD_OPTIONS").get(identity, None),
                config.Get("SSHPROXY_USER").get(identity, None),
            )
        ].append(identity)
    for id_group in configs.values():
        keys = {}
        for identity in id_group:
            keys.update(FindKeys(identity, config))
        if not config.Get("SSH_BATCH_MODE"):
            AgentManager(id_group[0], config, primary).LoadUnloadedKeys(keys)
    primary_agent.RunSSH(argv[1:])


if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        logger.debug("Goodbye")  # , file=sys.stderr)
